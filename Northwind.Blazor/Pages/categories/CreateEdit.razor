@page "/categories/create"
@page "/categories/edit/{id:int}"
@using Northwind.Blazor.Helpers
@using Northwind.Blazor.Models
@using Northwind.Common.Enums
@using Northwind.Core.Interfaces.Services
@using Northwind.Core.Exceptions as CoreExceptions
@using System.Diagnostics
@inject NavigationManager NavigationManager
@inject ICategoriesService CategoriesService
@inject ISnackbar Snackbar

<MudPaper Elevation="2" Class="my-1">
    <MudToolBar>
        <MudText><EntryModePageHeader Mode="_mode" DisplayName="Category"/></MudText>        
    </MudToolBar>
</MudPaper>

@if (_category is null)
{
    <MudAlert Severity="Severity.Error">Unable to load category.</MudAlert>
}
else
{
<EditForm Model="@_category" OnValidSubmit="Save">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem lg="6" sm="12" xs="12">            
            <MudTextField Label="Name" @bind-Value="_category.Name" For="@(() => _category.Name)"/>    
            <MudTextField T="string" Label="Description" @bind-Value="_category.Description" For="@(() => _category.Description)" Lines="3" Variant="Variant.Outlined"/>            
            <div class="d-flex justify-end mt-2">
                <MudButton Link="categories" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" Class="mr-1">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@_saveButtonText</MudButton>
            </div>
        </MudItem>
    </MudGrid>
</EditForm>
}
@code {
    private EntryMode _mode = EntryMode.Create;
    private Category? _category = null;
    private string _saveButtonText = "Save";
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _mode = NavigationManager.Uri.Contains("create") ? EntryMode.Create : EntryMode.Edit;
        switch (_mode)
        {
            case EntryMode.Create:
                _category = new Category();
                break;
            case EntryMode.Edit:
                var category = await CategoriesService.Get(Id);
                if (category is not null)
                    _category = MapperHelper.ToCategory(category);
                break;
        }
    }

    private async Task Save()
    {
        if(_category is not null)
        {
            var categoryDto = MapperHelper.ToCategoryDto(_category);
            _saveButtonText = "Saving...";

            try
            {
                switch (_mode)
                {
                    case EntryMode.Create:
                        var result = await CategoriesService.Create(categoryDto);
                        if (!result.IsSuccessful){
                            if (result.Messages is not null){
                                var messages = String.Join("<br/>", result.Messages.Select(x => x.Message.Value).ToList());
                                Notify(messages, false);
                            }
                            return;
                        }

                        Notify("Category created successfully.", true);
                        break;
                    case EntryMode.Edit:
                        var category = MapperHelper.ToCategoryDto(_category);
                        if (category is not null)
                        {
                            await CategoriesService.Update(category.Id, category);
                            Notify("Category updated successfully.", true);
                        }
                        break;
                }
                NavigationManager.NavigateTo("categories");
            }
            catch(ValidationFailedException exc)
            {
                var errorMessage = String.Join("<br/>", exc.ValidationErrors.Select(x => $"{x.Message.Key}:{x.Message.Value}").ToList());
                Notify(errorMessage, false);
            }
            catch(Exception exc)
            {
                Debug.WriteLine(exc);
                Notify("Something went wrong. Please try again.", false);
            }
            finally
            {
                _saveButtonText = "Save";
            }
        }
    }

    private void Notify(string message, bool isSuccessful)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
        Snackbar.Add(message, isSuccessful ? Severity.Success : Severity.Error);
    }
}
