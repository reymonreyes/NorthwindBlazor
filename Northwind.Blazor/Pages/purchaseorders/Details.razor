@page "/purchaseorders/create"
@page "/purchaseorders/{id:int}"
@using FluentValidation;
@using Northwind.Blazor.Helpers;
@using Northwind.Blazor.Models;
@using Northwind.Common.Enums;
@using Northwind.Core.Dtos;
@using Northwind.Core.Interfaces.Services;
@using Northwind.Core.Exceptions;
@inject NavigationManager NavigationManager
@inject ISuppliersService SuppliersService
@inject IPurchaseOrdersService PurchaseOrdersService
@inject IProductsService ProductsService
@inject IDialogService DialogService
@inherits PageBase

<MudToolBar WrapContent="true">
    <MudText><b>Purchase Order</b></MudText>
    <MudSpacer />
    @if (!(_purchaseOrder.Status == Core.Enums.OrderStatus.Completed) && !(_purchaseOrder.Status == Core.Enums.OrderStatus.Cancelled))
    {
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
        <MudText Class="mx-4"><b>></b></MudText>
    }
    @if(_purchaseOrder.Status == Core.Enums.OrderStatus.Cancelled)
    {
        <MudChip Color="Color.Warning">Cancelled</MudChip>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudText Typo="Typo.button">New</MudText>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudText Typo="Typo.button">Submitted</MudText>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudText Typo="Typo.button">Approved</MudText>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudText Typo="Typo.button">Approved</MudText>
    }
    @if(_purchaseOrder.Status == Core.Enums.OrderStatus.New)
    {
        <MudChip Color="Color.Success">New</MudChip>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="SubmitForApproval">Submit For Approval</MudButton>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudText Typo="Typo.button">Approve</MudText>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudText Typo="Typo.button">Complete</MudText>
    }
    @if(_purchaseOrder.Status == Core.Enums.OrderStatus.Submitted)
    {
        <MudText Typo="Typo.button">New</MudText>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudChip Color="Color.Success">Submitted</MudChip>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Approve">Approve</MudButton>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudText Typo="Typo.button">Complete</MudText>
    }   
    @if(_purchaseOrder.Status == Core.Enums.OrderStatus.Approved)
    {
        <MudText Typo="Typo.button">New</MudText>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudText Typo="Typo.button">Submitted</MudText>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudChip Color="Color.Success">Approved</MudChip>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Complete">Complete</MudButton>
    }
    @if (_purchaseOrder.Status == Core.Enums.OrderStatus.Completed)
    {
        <MudText Typo="Typo.button">New</MudText>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudText Typo="Typo.button">Submitted</MudText>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudText Typo="Typo.button">Approved</MudText>
        <MudText Class="mx-4"><b>></b></MudText>
        <MudChip Color="Color.Success">Completed</MudChip>
    }
</MudToolBar>
<MudDivider DividerType="DividerType.FullWidth" Light="true"/>
<MudGrid Class="pt-3" Spacing="3">
    <MudItem sm="12" md="6" lg="6">
       <MudForm @ref="_poForm" Model="_purchaseOrder" @bind-IsValid="@_isPODetailsValid" Validation="(_purchaseOrderValidator.ValidateValue)">
            <MudGrid>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudPaper Elevation="1" Square="true">
                        <MudToolBar>
                            <MudText>Order # <b>@(Id.HasValue ? Id.Value : "New")</b></MudText>
                            <MudSpacer />
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" Class="mr-1" OnClick="Save">Save</MudButton>
                            <MudButton Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" Class="mf-1">Print PO</MudButton>
                        </MudToolBar>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    @if (_errors.Count > 0)
                    {
                        <MudAlert Severity="MudBlazor.Severity.Error">
                            @foreach (var error in _errors)
                            {
                                <MudText>@error</MudText>
                            }
                        </MudAlert>
                    }
                </MudItem>
                <MudItem xs="12" sm="8" md="8" lg="8">
                    <MudAutocomplete Label="Supplier" @bind-Value="_purchaseOrder.Supplier" SearchFunc="@FindSupplier" ToStringFunc="@(e=> e==null?null : $"{e.Name}")"
                        For="@(() => _purchaseOrder.Supplier)" ResetValueOnEmptyText="true" Immediate="true" ProgressIndicatorColor="Color.Info" Variant="Variant.Outlined" Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="12" sm="4" md="4" lg="4">
                    <MudDatePicker @bind-Date="_purchaseOrder.OrderDate"  For="@(() => _purchaseOrder.OrderDate)" Label="Order Date(YYYY-MM-DD)" Margin="Margin.Dense" Variant="Variant.Outlined" Editable="true" Mask="@(new DateMask("0000-00-00"))" DateFormat="yyyy-MM-dd"/>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudTextField @bind-Value="_purchaseOrder.ShipTo" Label="Ship To" For="@(() => _purchaseOrder.ShipTo)" Immediate="true" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudTextField @bind-Value="_purchaseOrder.Notes" For="@(() => _purchaseOrder.Notes)" Label="Notes - Optional" Lines="3" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudItem>
    <MudItem sm="12" md="6" lg="6" Style="position: relative;">
        <MudOverlay Visible="_isOverlayVisible" Absolute="true" DarkBackground="true">
            <MudStack>
                <MudText Style="@($"color:{Colors.Shades.White};")">Updating</MudText>
                <MudProgressCircular Class="align-self-center" Color="Color.Primary" Indeterminate="true"/>
            </MudStack>
        </MudOverlay>
        <MudPaper Elevation="0">
            <MudForm @ref="_addItemForm" Model="_purchaseOrderItem" @bind-IsValid="_isAddItemFormValid" Validation="(_purchaseOrderItemValidator.ValidateValue)">
                <MudGrid>
                    <MudItem md="6">
                        <MudAutocomplete @ref="_productAutocomplete" Label="Product" Value="_purchaseOrderItem.Product" SearchFunc="@FindProduct" ToStringFunc="@(e=> e==null?null : $"{e.Name}")"
                                         For="@(() => _purchaseOrderItem.Product)" ValueChanged="OnProductValueChanged" T="ProductDto" ResetValueOnEmptyText="true" Immediate="true" ProgressIndicatorColor="Color.Info" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    </MudItem>
                    <MudItem md="2">
                        <MudNumericField @bind-Value="_purchaseOrderItem.Quantity" For="@(() => _purchaseOrderItem.Quantity)" Variant="Variant.Outlined" Margin="Margin.Dense" T="int" Label="Qty" Adornment="Adornment.End"></MudNumericField>
                    </MudItem>
                    <MudItem md="2">
                        <MudNumericField @bind-Value="_purchaseOrderItem.UnitPrice" For="@(() => _purchaseOrderItem.UnitPrice)" Format="N2" Variant="Variant.Outlined" Margin="Margin.Dense" T="decimal" Label="Unit Price" Adornment="Adornment.End"></MudNumericField>
                    </MudItem>
                    <MudItem md="2" Class="d-flex px-8 pt-1">                    
                        <MudButton Class="align-self-center" OnClick="AddItem" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Add</MudButton>                    
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>

        <MudSimpleTable Style="overflow-x: auto;" Hover="true" Bordered="true" Dense="true">
            <colgroup>
                <col/><col/>
                <col width="15%"/>
                <col width="15%" />
                <col/>
                <col width="11%" />
            </colgroup>
            <thead>                
                <tr>
                    @foreach (var h in headings)
                    {
                        <th style="text-align:center;">@h</th>
                    }
                    <th></th>
                </tr>
            </thead>
            <tbody>                
                @if(_purchaseOrder.Items is not null)
                {
                    @foreach (var item in _purchaseOrder.Items)
                    {
                        if (item.IsInEditMode)
                        {
                            item.EditItem = @<Northwind.Blazor.Components.EditPurchaseOrderItem Item="item" OnUpdateItem="UpdateItem" OnCancelUpdateItem="CancelUpdateItem"></Northwind.Blazor.Components.EditPurchaseOrderItem>;
                            @item.EditItem
                        }
                        else
                        {
                            <tr>
                                <td>@item.Product.Id</td>
                                <td>@item.Product.Id</td>
                                <td style="text-align:right;">@item.Quantity</td>
                                <td style="text-align:right;">@item.UnitPrice.ToString("N")</td>
                                <td style="text-align:right;">@item.Total.ToString("N")</td>
                                <td style="text-align: center;">
                                    <MudIconButton OnClick="() => EditItem(item)" Icon="@Icons.Material.Filled.Edit" aria-label="delete" Size="Size.Small"></MudIconButton>
                                    <MudIconButton OnClick="() => RemoveItem(item)" Icon="@Icons.Material.Filled.Close" aria-label="delete" Size="Size.Small"></MudIconButton>                                    
                                </td>
                            </tr>
                        }
                    }
                }                
            </tbody>
        </MudSimpleTable>
    </MudItem>
</MudGrid>

@code {
    private EntryMode _entryMode = EntryMode.Create;
    public bool _isPODetailsValid = false, _isAddItemFormValid;
    private MudForm _poForm, _addItemForm;
    private PurchaseOrder _purchaseOrder = new PurchaseOrder();
    private PurchaseOrderItem _purchaseOrderItem = new PurchaseOrderItem();
    private string _supplierSearch;
    private PurchaseOrderFluentValidator _purchaseOrderValidator = new PurchaseOrderFluentValidator();
    private PurchaseOrderItemFluentValidator _purchaseOrderItemValidator = new PurchaseOrderItemFluentValidator();
    private bool _isOverlayVisible = false;
    private MudAutocomplete<ProductDto> _productAutocomplete;

    RenderFragment? dummy = @<MudForm></MudForm>;


    private List<string> _errors = new List<string>();
    string[] headings = { "ID", "Description", "Qty", "Unit price", "Total" };    

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitialized--");

        _entryMode = NavigationManager.Uri.EndsWith("create") ? EntryMode.Create : EntryMode.Edit;

        switch (_entryMode)
        {
            case EntryMode.Create:
                _purchaseOrder = new PurchaseOrder();
                _purchaseOrder.Items = new List<PurchaseOrderItem>();
                _purchaseOrder.OrderDate = DateTime.Now;
                break;
            case EntryMode.Edit:
                await LoadPurchaseOrder();
                break;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("OnAfterRenderAsync()");
        await _poForm.Validate();
    }

    private async Task LoadPurchaseOrder()
    {
        Console.WriteLine("LoadPurchaseOrder()");
        var purchaseOrder = await PurchaseOrdersService.GetAsync(Id.Value);
        if (purchaseOrder is not null)
        {
            _purchaseOrder = new PurchaseOrder
            {
                ShipTo = purchaseOrder.ShipTo,
                OrderDate = purchaseOrder.OrderDate.ToLocalTime(),
                Notes = purchaseOrder.Notes,
                Status = purchaseOrder.Status,
                Items = purchaseOrder.OrderItems.Select(x => new PurchaseOrderItem { Id = x.Id, Product = new ProductDto { Id = x.Id }, Quantity = x.Quantity, UnitPrice = x.UnitPrice.Value }).ToList()
            };

            var supplier = await SuppliersService.Get(purchaseOrder.SupplierId);
            if(supplier is not null)
                _purchaseOrder.Supplier = new SupplierDto { Id = supplier.Id, Name = supplier.Name };

            Console.WriteLine("PurchaseOrder loaded");
        }
    }

    private async Task<IEnumerable<SupplierDto>> FindSupplier(string supplierName)
    {
        if (string.IsNullOrWhiteSpace(supplierName))
            return new List<SupplierDto>();

        Console.WriteLine("FindSupplier");

        ICollection<SupplierDto> matchedSuppliers = await SuppliersService.Find(supplierName);

        return matchedSuppliers;
    }

    private async Task<IEnumerable<ProductDto>> FindProduct(string productName)
    {
        Console.WriteLine("FindProduct");
        if (string.IsNullOrWhiteSpace(productName))
            return new List<ProductDto>();

        ICollection<ProductDto> matchedProducts = await ProductsService.Find(productName);

        return matchedProducts;
    }

    private async Task<bool> Save()
    {
        Console.WriteLine("Save()");
        await _poForm.Validate();

        if (!_isPODetailsValid)
            return false;

        switch (_entryMode)
        {
            case EntryMode.Create:
                await Create();
                break;
            case EntryMode.Edit:
                await Update();
                break;
        }

        return true;
    }

    private async Task Create()
    {
        try
        {
            var purchaseOrder = _purchaseOrder.ToPurchaseOrderDto();
            var result = await PurchaseOrdersService.Create(purchaseOrder);
            if (result.IsSuccessful)
            {
                var id = result?.Messages?.FirstOrDefault()?.Message.Value;
                Notify($"Purchase Order # {id} {(_entryMode == EntryMode.Create ? "created" : "updated")} successfully.", MudBlazor.Severity.Success);
                Id = int.Parse(id);
                _entryMode = EntryMode.Edit;
                NavigationManager.NavigateTo($"purchaseorders/{id}", false, true);
            }
        }
        catch (ValidationFailedException exc)//server side error
        {
            Console.WriteLine("creation failed");
            _errors = exc.ValidationErrors.Select(x => x.Message.Value).ToList();
        }
    }

    private async Task Update()
    {
        try
        {
            if (Id.HasValue)
            {
                var purchaseOrder = _purchaseOrder.ToPurchaseOrderDto();
                var result = await PurchaseOrdersService.UpdateAsync(Id.Value, purchaseOrder);
                if (result.IsSuccessful)
                {
                    Notify($"Purchase Order # {Id} {(_entryMode == EntryMode.Create ? "created" : "updated")} successfully.", MudBlazor.Severity.Success);
                }
            }
        }
        catch (ValidationFailedException exc)//server side error
        {
            //TODO: logging
            _errors = exc.ValidationErrors.Select(x => x.Message.Value).ToList();
        }
    }

    private void OnProductValueChanged(ProductDto? productDto)
    {
        Console.WriteLine("ValueChanged");
        _purchaseOrderItem.Product = productDto;
        if (productDto is not null)
            _purchaseOrderItem.UnitPrice = productDto.ListPrice;
    }

    private async Task AddItem()
    {
        await _addItemForm.Validate();

        if (!_isAddItemFormValid)
            return;

        switch (_entryMode)
        {
            case EntryMode.Create:
                //saved PO first before saving the item
                var success = await Save();
                if (success)
                    await AddItemToPurchaseOrder();
                break;
            case EntryMode.Edit:
                await AddItemToPurchaseOrder();
                break;
        }
    }

    private async Task AddItemToPurchaseOrder()
    {
        _isOverlayVisible = true;

        var item = new PurchaseOrderItemDto
        {
            ProductId = _purchaseOrderItem.Product.Id,
            Quantity = _purchaseOrderItem.Quantity,
            UnitPrice = _purchaseOrderItem.UnitPrice
        };

        try
        {
            await PurchaseOrdersService.AddItem(Id.Value, item);
            _purchaseOrder.Items.Add(_purchaseOrderItem);
            _purchaseOrderItem = new PurchaseOrderItem();
            await _productAutocomplete.Clear();
            _isOverlayVisible = false;
            Notify($"Item added successfully.", MudBlazor.Severity.Success);
        }
        catch(Exception exc)
        {
            var message = exc.Message;
            Notify(message, MudBlazor.Severity.Error);
        }

        _isOverlayVisible = false;
    }

    private async Task RemoveItem(PurchaseOrderItem purchaseOrderItem)
    {
        _isOverlayVisible = true;
        _purchaseOrder.Items.Remove(purchaseOrderItem);
        await PurchaseOrdersService.RemoveItem(purchaseOrderItem.Id);
        _isOverlayVisible = false;
    }

    public void EditItem(PurchaseOrderItem purchaseOrderItem)
    {
        purchaseOrderItem.IsInEditMode = true;
    }

    private async Task UpdateItem(PurchaseOrderItem purchaseOrderItem)
    {
        Console.WriteLine("UpdateItem");
        _isOverlayVisible = true;
        
        var item = new PurchaseOrderItemDto
        {
            Id = purchaseOrderItem.Id,
            ProductId = purchaseOrderItem.Product.Id,
            Quantity = purchaseOrderItem.Quantity,
            UnitPrice = purchaseOrderItem.UnitPrice
        };

        try
        {
            await PurchaseOrdersService.UpdateItem(Id.Value, item);//add updateitemasync method
            purchaseOrderItem.IsInEditMode = false;
            purchaseOrderItem.EditItem = null;            
            _isOverlayVisible = false;
            Notify($"Item added successfully.", MudBlazor.Severity.Success);
        }
        catch (Exception exc)
        {
            var message = exc.Message;
            Notify(message, MudBlazor.Severity.Error);
        }

        _isOverlayVisible = false;

        purchaseOrderItem.IsInEditMode = false;
    }

    private void CancelUpdateItem(PurchaseOrderItem purchaseOrderItem)
    {
        Console.WriteLine("CancelUpdateItem from parent");
        purchaseOrderItem.IsInEditMode = false;
        purchaseOrderItem.EditItem = null;
        StateHasChanged();
    }

    private async Task SubmitForApproval()
    {
        //prompt user for confirmation
        var confirmed = await DialogService.ShowMessageBox(
            "Submit for Approval",
            "Do you want to submit this Purchase Order for approval?",
            "Yes",
            "No"
        );
        Console.WriteLine($"confirmed: {confirmed}");
        if (confirmed.HasValue && confirmed.Value)
        {
            try
            {
                var result = await PurchaseOrdersService.SubmitAsync(Id.Value);
                _purchaseOrder.Status = Core.Enums.OrderStatus.Submitted;
                Notify("Purchase Order successfully submitted.", MudBlazor.Severity.Success);
            }
            catch(Exception exc)
            {
                Notify(exc.Message, MudBlazor.Severity.Error);
            }
        }
    }

    private async Task Approve()
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Approve",
            "Do you want to approve this Purchase Order?",
            "Yes",
            "No"
        );

        if (confirmed.HasValue && confirmed.Value)
        {
            try
            {
                var result = await PurchaseOrdersService.ApproveAsync(Id.Value);
                _purchaseOrder.Status = Core.Enums.OrderStatus.Approved;
                Notify("Purchase Order successfully submitted.", MudBlazor.Severity.Success);
            }
            catch (Exception exc)
            {
                Notify(exc.Message, MudBlazor.Severity.Error);
            }
        }
    }

    private async Task Complete()
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Close",
            "Do you want to complete this Purchase Order?",
            "Yes",
            "No"
        );

        if (confirmed.HasValue && confirmed.Value)
        {
            try
            {
                await PurchaseOrdersService.CompleteOrder(Id.Value);
                _purchaseOrder.Status = Core.Enums.OrderStatus.Completed;
                Notify("Purchase Order successfully submitted.", MudBlazor.Severity.Success);
            }
            catch (Exception exc)
            {
                Notify(exc.Message, MudBlazor.Severity.Error);
            }
        }
    }

    private async Task Cancel()
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Cancel",
            "Are you sure you want to cancel this Purchase Order?",
            "Yes",
            "No"
        );

        if (confirmed.HasValue && confirmed.Value)
        {
            try
            {
                await PurchaseOrdersService.CancelAsync(Id.Value);
                _purchaseOrder.Status = Core.Enums.OrderStatus.Cancelled;
                Notify("Purchase Order cancelled.", MudBlazor.Severity.Warning);
            }
            catch (Exception exc)
            {
                Notify(exc.Message, MudBlazor.Severity.Error);
            }
        }
    }

    public class PurchaseOrderFluentValidator : AbstractValidator<PurchaseOrder>
    {
        public PurchaseOrderFluentValidator()
        {
            RuleFor(x => x.OrderDate).NotEmpty().WithMessage("OrderDate is required");
            RuleFor(x => x.ShipTo).NotEmpty().WithMessage("ShipTo is required");
            RuleFor(X => X.Supplier).NotEmpty().WithMessage("Supplier is required");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<PurchaseOrder>.CreateWithOptions((PurchaseOrder)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };        
    }

    public class PurchaseOrderItemFluentValidator : AbstractValidator<PurchaseOrderItem>
    {
        public PurchaseOrderItemFluentValidator()
        {
            RuleFor(x => x.Product).NotEmpty().WithMessage("Required");
            RuleFor(x => x.Quantity).NotEmpty().WithMessage("Required").GreaterThanOrEqualTo(0).WithMessage("Invalid");
            RuleFor(x => x.UnitPrice).NotEmpty().WithMessage("Required").GreaterThanOrEqualTo(0).WithMessage("Invalid");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<PurchaseOrderItem>.CreateWithOptions((PurchaseOrderItem)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}
