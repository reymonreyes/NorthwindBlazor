@page "/purchaseorders/create"
@using Northwind.Blazor.Models;
@using Northwind.Common.Enums;
@using Northwind.Core.Dtos;
@using Northwind.Core.Interfaces.Services;
@inject NavigationManager NavigationManager
@inject ISuppliersService SuppliersService

<MudToolBar WrapContent="true">
    <MudText><b>Purchase Order</b></MudText>
    <MudSpacer />
    <MudButton Variant="Variant.Text">Cancel</MudButton>
    <MudText Class="mx-4"><b>></b></MudText>
    <MudChip Color="Color.Success" Label="true">New</MudChip>
    <MudText Class="mx-4"><b>></b></MudText>
    <MudButton>Submit For Approval</MudButton>
    <MudText Class="mx-4"><b>></b></MudText>
    @* <MudButton Disabled="true">Approve</MudButton> *@
    <MudText Typo="Typo.button">Approve</MudText>
    <MudText Class="mx-4"><b>></b></MudText>
    <MudText Typo="Typo.button">Complete</MudText>
    @* <MudButton>Complete</MudButton> *@
</MudToolBar>
<MudDivider DividerType="DividerType.FullWidth" Light="true"/>

<MudGrid Class="pt-3" Spacing="3">
    <MudItem sm="12" md="6" lg="6">
       <MudForm @ref="_poForm" @bind-IsValid="@_isPODetailsValid">           
            <MudGrid>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudPaper Elevation="1" Square="true">
                        <MudToolBar>
                            <MudText>Order # <b>1</b> @_isPODetailsValid</MudText>
                            <MudSpacer />
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" Class="mr-1" Disabled="@(!_isPODetailsValid)">Save</MudButton>
                            <MudButton Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" Class="mf-1">Print PO</MudButton>
                        </MudToolBar>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="8" md="8" lg="8">
                    <MudAutocomplete Label="Supplier" @bind-Value="_supplier" SearchFunc="@FindSupplier" ToStringFunc="@(e=> e==null?null : $"{e.Name}")"
                        ResetValueOnEmptyText="true" Required="true" ShowProgressIndicator="true" RequiredError="Supplier is required" ProgressIndicatorColor="Color.Info" />
                </MudItem>
                <MudItem xs="12" sm="4" md="4" lg="4">
                    <MudDatePicker @bind-Date="_purchaseOrder.OrderDate" Required="true" RequiredError="Order Date is required" Label="Order Date(YYYY-MM-DD)" Margin="Margin.Dense" Variant="Variant.Outlined" Editable="true" Mask="@(new DateMask("0000-00-00"))" DateFormat="yyyy-MM-dd"/>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudTextField @bind-Value="_purchaseOrder.ShipTo" Label="Ship To" Required="true" RequiredError="Shipping address is required" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudTextField Value="_purchaseOrder.Notes" Label="Notes - Optional" Lines="3" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudItem>
    <MudItem sm="12" md="6" lg="6">
        <MudPaper Elevation="0">
            <MudGrid>
                <MudItem md="6">
                    <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" T="string" Label="Product" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.MoreHoriz"></MudTextField>
                </MudItem>
                <MudItem md="2">
                    <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" T="string" Label="Qty" Adornment="Adornment.End"></MudTextField>
                </MudItem>
                <MudItem md="2">
                    <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" T="string" Label="Unit Price" Adornment="Adornment.End"></MudTextField>
                </MudItem>
                <MudItem md="2" Class="d-flex px-8">                    
                    <MudButton Class="align-self-end" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Add</MudButton>                    
                </MudItem>
            </MudGrid>
        </MudPaper>

        <MudSimpleTable Style="overflow-x: auto;" Hover="true">
            <thead>
                <tr>
                    @foreach (var h in headings)
                    {
                        <th>@h</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var row in rows)
                {
                    <tr>
                        @foreach (var x in row.Split(','))
                        {
                            <td>@x</td>
                        }
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </MudItem>
</MudGrid>





@code {
    public bool _isPODetailsValid { get; set; }
    private MudForm _poForm;
    private PurchaseOrder _purchaseOrder;
    private EntryMode _entryMode = EntryMode.Create;
    private string _supplierSearch;
    private SupplierDto _supplier = null;
    string[] headings = { "ID", "Description", "Qty", "Unit price", "Total" };
    string[] rows = {
        @"1,Krishna kpartner0@usatoday.com Male, 28, 250.02,123.44",
        @"2,Webb wstitle1@ning.com Male, 23, 134.11, 42.55",
        @"3,Nathanil nneal2@cyberchimps.com Male, 92, 175.00, 21.22",
        @"4,Adara alockwood3@patch.com Female, 182, 217.15, 552.21",
        @"5,Cecilius cchaplin4@shinystat.com Male, 195, 144.18, 631.22",
        @"6,Cicely cemerine9@soup.io Female, 138, 191.43, 244.21",
    };

    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized--");

        _entryMode = NavigationManager.Uri.EndsWith("create") ? EntryMode.Create : EntryMode.Edit;

        switch (_entryMode)
        {
            case EntryMode.Create:
                _purchaseOrder = new PurchaseOrder();                
                _purchaseOrder.OrderDate = DateTime.Now;
                break;
            case EntryMode.Edit:
                break;
        }               
    }

    protected override void OnAfterRender(bool firstRender)
    {
        _poForm.Validate();
    }

    private async Task<IEnumerable<SupplierDto>> FindSupplier(string supplierName)
    {
        if (string.IsNullOrWhiteSpace(supplierName))
            return new List<SupplierDto>();

        Console.WriteLine("FindSupplier");

        ICollection<SupplierDto> matchedSuppliers = await SuppliersService.Find(supplierName);

        return matchedSuppliers;
    }
}
