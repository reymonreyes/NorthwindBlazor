@page "/customers/create"
@page "/customers/{id}/edit"
@using Northwind.Blazor.Helpers
@using Northwind.Blazor.Models
@using Northwind.Common.Enums
@using Northwind.Core.Exceptions
@using Northwind.Core.Interfaces.Services
@using System.Diagnostics
@inject NavigationManager NavigationManager
@inject ICustomersService CustomersService
@inherits PageBase

<MudPaper Elevation="1" Class="my-1">
    <MudToolBar>
        <MudText><EntryModePageHeader Mode="_mode" DisplayName="Customer" /></MudText>
    </MudToolBar>
</MudPaper>

@if(IsLoading)
{
    <MudProgressLinear Indeterminate="true"/>
}
@if(_customer is not null)
{
    <EditForm Model="@_customer" OnValidSubmit="Save">
        <MudGrid>
            <MudItem lg="6" sm="12" xs="12">
                <DataAnnotationsValidator/>
                <MudTextField Label="Id" @bind-Value="_customer.Id" For="@(() => _customer.Id)" Disabled="(_mode == EntryMode.Edit)"/>
                <MudTextField Label="Name" @bind-Value="_customer.Name" For="@(() => _customer.Name)"/>
                <MudTextField Label="Contact Name" @bind-Value="_customer.ContactName" For="@(() => _customer.ContactName)"/>
                <MudTextField Label="Contact Title" @bind-Value="_customer.ContactTitle" For="@(() => _customer.ContactTitle)"/>
                <MudTextField Label="Address" @bind-Value="_customer.Address" For="@(() => _customer.Address)"/>
                <MudTextField Label="City" @bind-Value="_customer.City" For="@(() => _customer.City)"/>
                <MudTextField Label="Region" @bind-Value="_customer.Region" For="@(() => _customer.Region)"/>
                <MudTextField Label="Countr" @bind-Value="_customer.Country" For="@(() => _customer.Country)"/>
                <MudTextField Label="Postal Code" @bind-Value="_customer.PostalCode" For="@(() => _customer.PostalCode)"/>
                <MudTextField Label="Phone" @bind-Value="_customer.Phone" For="@(() => _customer.Phone)"/>
                <MudTextField Label="Fax" @bind-Value="_customer.Fax" For="@(() => _customer.Fax)"/>
                <div class="d-flex justify-end mt-2">
                    <MudButton Link="customers" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" Class="mr-1">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@_saveButtonText</MudButton>
                </div>    
            </MudItem>
        </MudGrid>
    </EditForm>
}
else
{
    <MudAlert Severity="Severity.Info" Variant="Variant.Text">Customer not found.</MudAlert>
}

@code {
    private Customer? _customer;
    private EntryMode _mode = EntryMode.Create;
    private string _saveButtonText = "Save";

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _mode = NavigationManager.Uri.Contains("create") ? EntryMode.Create : EntryMode.Edit;

        switch (_mode)
        {
            case EntryMode.Create:
                _customer = new Customer();
                break;
            case EntryMode.Edit:
                await LoadCustomer();
                break;
        }

    }

    private async Task LoadCustomer()
    {
        IsLoading = true;

        var customer = await CustomersService.Get(Id);
        if (customer is not null)
            _customer = MapperHelper.ToCustomer(customer);
        else
            Notify("Supplier not found.", Severity.Error);

        IsLoading = false;
    }

    private async Task Save()
    {
        IsLoading = true;
        try
        {
            if (_customer is not null)
            {
                var customerDto = MapperHelper.ToCustomerDto(_customer);
                switch (_mode)
                {
                    case EntryMode.Create:
                        await CustomersService.Create(customerDto);
                        break;
                    case EntryMode.Edit:
                        await CustomersService.Update(Id, customerDto);
                        break;
                }
                Notify($"Customer {(_mode == EntryMode.Create ? "created" : "updated")} successfully.", Severity.Success);
                NavigationManager.NavigateTo("customers");
            }
        }
        catch(ValidationFailedException exc)
        {
            var errorMessage = String.Join("<br/>", exc.ValidationErrors.Select(x => $"{x.Message.Key}:{x.Message.Value}").ToList());
            Notify(errorMessage, Severity.Error);
        }
        catch(Exception exc)
        {
            Debug.WriteLine(exc);
            Notify("Something went wrong. Please try again.", Severity.Error);
        }
        IsLoading = false;        
    }
}