@page "/shippers"
@using Northwind.Blazor.Helpers
@using Northwind.Blazor.Models
@using Northwind.Core.Dtos
@using Northwind.Core.Interfaces.Services
@using System.Diagnostics
@inherits PageBase
@inject IDialogService DialogService
@inject IShippersService ShippersService
<MudPaper Elevation="2" Class="my-1">
    <MudToolBar>
        <MudText>Shippers</MudText>
        <MudSpacer />
        <MudButton Link="shippers/create" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">Create Shipper</MudButton>
    </MudToolBar>
</MudPaper>
@if (IsLoading)
{
    <MudProgressLinear Indeterminate="true"/>
}

@if(!_shippers.Any())
{
    <MudAlert Severity="Severity.Info" Variant="Variant.Text">No shippers found.</MudAlert>    
}
else
{
<MudSimpleTable Style="overflow-x: auto;" Dense="true" Hover="true" Bordered="true">
    <thead>
        <tr class="text-center">
            <th>Name</th>            
            <th>Phone</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
    @foreach (var shipper in _shippers)
    {
        <tr>
            <td>
                <MudLink Href="@string.Format("shippers/{0}", shipper.Id)" Underline="Underline.None" Class="d-flex flex-grow-1">@shipper.Name</MudLink>
            </td>            
            <td>@shipper.Phone</td>
            <td>
                <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="() => Delete(shipper)">Delete</MudButton>
            </td>
        </tr>
    }
    </tbody>
</MudSimpleTable>
}

@code {
    private ICollection<Shipper> _shippers = new List<Shipper>();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await LoadShippers();
        IsLoading = false;
    }

    private async Task Delete(Shipper shipper)
    {
        var confirm = await DialogService.ShowMessageBox("Warning",
            (MarkupString)$"Do you want to delete this category?<br/><b>{shipper.Name}</b>",
            yesText: "Yes",
            noText: "No"
        );

        if (confirm is not null && confirm.Value)
        {
            try
            {
                await ShippersService.Delete(shipper.Id);
                await LoadShippers();
            }
            catch (Exception exc)
            {
                Debug.WriteLine(exc);
                Notify("Something went wrong. Please try again.", Severity.Error);
            }
        }
    }

    private async Task LoadShippers()
    {
        ICollection<ShipperDto> shippers = await ShippersService.GetAll();        
        _shippers = shippers.Select(x => MapperHelper.ToShipper(x)).ToList();
    }
}
