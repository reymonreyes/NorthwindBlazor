@page "/products/create"
@page "/products/{id:int}/edit"
@using Northwind.Blazor.Helpers
@using Northwind.Blazor.Models
@using Northwind.Common.Enums
@using Northwind.Core.Exceptions
@using Northwind.Core.Interfaces.Services
@using System.Diagnostics
@inject NavigationManager NavigationManager
@inject IProductsService ProductsService
@inherits PageBase

<MudPaper Elevation="2" Class="my-1">
    <MudToolBar>
        <MudText><EntryModePageHeader Mode="_mode" DisplayName="Product"/></MudText>        
    </MudToolBar>
</MudPaper>

@if(_product is null)
{
<MudAlert Severity="Severity.Error">Unable to load product.</MudAlert>
}
else{
<EditForm Model="@_product" OnValidSubmit="Save">
    <MudGrid>
        <MudItem lg="6" sm="12" xs="12">
                <DataAnnotationsValidator/>
                <MudTextField Label="Name" @bind-Value="_product.Name" For="@(() => _product.Name)"/>
                <MudTextField Label="Code" @bind-Value="_product.Code" For="@(() => _product.Code)"/>
                <MudTextField Label="Quantity Per Unit" @bind-Value="_product.QuantityPerUnit" For="@(() => _product.QuantityPerUnit)"/>
                <MudNumericField Label="Unit Price" @bind-Value="_product.UnitPrice" For="@(() => _product.UnitPrice)" />
                <MudNumericField Label="Units In Stock" @bind-Value="_product.UnitsInStock" For="@(() => _product.UnitsInStock)" />
                <MudNumericField Label="Units On Order" @bind-Value="_product.UnitsOnOrder" For="@(() => _product.UnitsOnOrder)" />
                <MudNumericField Label="Reorder Level" @bind-Value="_product.ReorderLevel" For="@(() => _product.ReorderLevel)" />
                <MudTextField T="string" Label="Description"  Text="@_product.Description" Lines="3" Variant="Variant.Outlined"/>
            <div class="d-flex justify-end mt-2">
                <MudButton Link="products" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" Class="mr-1">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@_saveButtonText</MudButton>
            </div>    
        </MudItem>
    </MudGrid>
</EditForm>
}

@code {
    private EntryMode _mode = EntryMode.Create;
    private Product? _product;
    private string _saveButtonText = "Save";

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _mode = NavigationManager.Uri.Contains("create") ? EntryMode.Create : EntryMode.Edit;

        switch(_mode){
            case EntryMode.Create:
                _product = new Product();
                break;
            case EntryMode.Edit:
                var productDto = await ProductsService.Get(Id);
                if (productDto is not null)
                    _product = MapperHelper.ToProduct(productDto);
                break;
        }
    }

    private async Task Save()
    {
        if (_product != null)
        {
            var productDto = MapperHelper.ToProductDto(_product);
            _saveButtonText = "Saving...";

            try
            {
                switch (_mode)
                {
                    case EntryMode.Create:
                        await ProductsService.Create(productDto);
                        break;
                    case EntryMode.Edit:
                        await ProductsService.Update(Id, productDto);
                        break;
                }
                Notify($"Product {(this._mode == EntryMode.Create ? "created" : "updated")} successfully.", Severity.Success);
                Back();
            }
            catch (ValidationFailedException exc)
            {
                var errorMessage = String.Join("<br/>", exc.ValidationErrors.Select(x => $"{x.Message.Key}:{x.Message.Value}").ToList());
                Notify(errorMessage, Severity.Error);
            }
            catch (Exception exc)
            {
                //add persistent logging in future
                Console.WriteLine(exc.Message);
                Debug.WriteLine(exc.Message);
                Notify("Something went wrong. Please try again.", Severity.Error);
            }
            finally { Reset(); }
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("products");
    }

    private void Reset()
    {
        _saveButtonText = "Save";
    }
}
